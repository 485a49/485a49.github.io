{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/11/30/hello-world/"},{"title":"详细设计","text":"cn.edu.nwafu.cie.teach.common.util.RedisDistributedLock 通过 SET 命令的原子性与 Lua 脚本的事务特性，保证了分布式环境中锁的正确性与安全性。 1234if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end Nacos 源码化运行1. 方便开发过程使用如果从 Spring Cloud Netflix 体系迁移到 Spring Cloud Alibaba 技术体系，明显的感受是整个体系得到简化。 Nacos 承担整个 Spring Cloud 的服务发现、配置管理部分的实现。 是整个开发过程中强依赖，启动微服务业务要去检查 Nacos Server 是否已经启动，解压安装的方式变的非常不便。 如果把 Nacos Server 作为整个微服务框架的一部分直接 Main 启动，是不是更加方便便利。 2. UI 个性定制化若以解压运行方式，修改 UI 几乎不可能。可以下载 Nacos 源码继续修改 然后重新打包运行。 非常的不方便 123456789git clone https://github.com/alibaba/nacos.gitcd nacos/mvn -Prelease-nacos -Dmaven.test.skip=true clean install -Uls -al distribution/target/// change the $version to your actual pathcd distribution/target/nacos-server-$version/nacos/bin 3. 保证 Server &amp; Client 保持一致 pig 作为微服务开源项目，更新迭代速度非常快。每个版本依赖的 Nacos Client 版本都可能发生变化，这就意味着对应的 Nacos Server 版本也要对应升级，这需要用户自行下载升级成本很高。 Nacos 具有良好小版本向下兼容性，但是大版本功能变化挺大，比如 1.2 、1.3 权限的变更。所以建议大家在实际开发过程中保持版本一致。 若以源码运行的方式，可以很好的解决此问题。","link":"/2024/12/01/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/"}],"tags":[],"categories":[],"pages":[]}